#include <bits/stdc++.h>
#include <gtest/gtest.h>

#include "algorithm.h"
#include "test_utils.h"

using std::begin;
using std::cout;
using std::end;
using std::endl;
using std::string;
using std::swap;
using std::vector;

#include "Interval.h"
#include "merge_intervals_2_merge_entire_list_solution1.cpp"
#include "merge_intervals_2_merge_entire_list_solution2.cpp"

TEST(merge_intervals_2_entire_list, test_empty)
{
  std::vector<Interval> intervals = {};
  std::vector<Interval> expected  = {};

  {
    const auto ans = merge_list_intervals_entire_list_lin_time(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }

  {
    const auto ans = merge_list_intervals_entire_list_bruteforce(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }
}

TEST(merge_intervals_2_entire_list, example_1)
{
  std::vector<Interval> intervals = {{1, 3}, {2, 6}, {8, 10}, {15, 18}};
  std::vector<Interval> expected  = {{1, 6}, {8, 10}, {15, 18}};
  {
    auto input     = intervals;
    const auto ans = merge_list_intervals_entire_list_lin_time(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }

  {
    auto input     = intervals;
    const auto ans = merge_list_intervals_entire_list_bruteforce(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }
}

TEST(merge_intervals_2_entire_list, example_2)
{
  std::vector<Interval> intervals = {{1, 4}, {4, 5}};
  std::vector<Interval> expected  = {{1, 5}};
}

TEST(merge_intervals_2_entire_list, example_all_disjoint)
{
  std::vector<Interval> intervals = {
      {-1, 0}, {1, 2}, {3, 5}, {8, 11}, {12, 25}};
  std::vector<Interval> expected = intervals;

  {
    auto input     = intervals;
    const auto ans = merge_list_intervals_entire_list_lin_time(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }

  {
    auto input     = intervals;
    const auto ans = merge_list_intervals_entire_list_bruteforce(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }
}

TEST(merge_intervals_2_entire_list,
     random_generated_long_2_merge_into_one_interval)
{
  std::vector<Interval> intervals = {
      {43, 46}, {30, 49}, {64, 83}, {1, 34},  {13, 80}, {44, 50},  {66, 89},
      {21, 30}, {15, 19}, {63, 72}, {58, 84}, {20, 90}, {68, 83},  {36, 67},
      {94, 99}, {45, 74}, {34, 46}, {15, 66}, {26, 27}, {55, 84},  {72, 99},
      {55, 76}, {18, 78}, {19, 88}, {21, 24}, {15, 80}, {63, 82},  {45, 82},
      {46, 71}, {20, 89}, {13, 45}, {39, 88}, {64, 80}, {52, 77},  {79, 82},
      {59, 66}, {74, 87}, {70, 75}, {10, 63}, {5, 30},  {47, 57},  {12, 31},
      {41, 96}, {38, 65}, {78, 90}, {54, 96}, {8, 44},  {75, 78},  {29, 60},
      {1, 57},  {4, 32},  {8, 48},  {31, 48}, {16, 98}, {33, 93},  {84, 86},
      {11, 90}, {25, 44}, {27, 39}, {44, 96}, {58, 95}, {40, 68},  {9, 11},
      {47, 79}, {66, 81}, {13, 89}, {32, 61}, {1, 96},  {49, 94},  {0, 34},
      {17, 37}, {35, 59}, {8, 95},  {26, 98}, {17, 65}, {11, 100}, {59, 62},
      {2, 95},  {18, 31}, {19, 82}, {9, 10},  {5, 90},  {45, 76},  {18, 83},
      {77, 80}, {67, 98}, {12, 83}, {15, 89}, {4, 40},  {54, 96},  {67, 86},
      {23, 56}, {43, 75}, {20, 73}, {41, 78}, {1, 96},  {18, 28},  {46, 65},
      {29, 29}, {0, 13}};
  std::vector<Interval> expected = {{0, 100}};

  {
    auto input     = intervals;
    const auto ans = merge_list_intervals_entire_list_lin_time(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }

  {
    auto input     = intervals;
    const auto ans = merge_list_intervals_entire_list_bruteforce(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }
}

TEST(merge_intervals_2_entire_list, random_generated_long_merge_into_two)
{
  std::vector<Interval> intervals = {
      {7485, 84116}, {43, 75},      {63, 72},       {15, 66},
      {18, 31},      {74, 87},      {46, 71},       {12, 31},
      {45, 76},      {12, 83},      {63, 82},       {79, 82},
      {4, 32},       {41, 96},      {18, 78},       {20, 89},
      {25, 44},      {1, 96},       {68, 83},       {30, 49},
      {11, 90},      {8, 44},       {39, 88},       {77, 80},
      {94, 99},      {29, 29},      {46, 65},       {49, 94},
      {58, 95},      {4716, 54074}, {1, 96},        {64, 83},
      {11, 100},     {21, 24},      {1, 34},        {4, 40},
      {17, 37},      {66, 89},      {1, 57},        {15, 89},
      {84, 86},      {19, 88},      {59, 66},       {47955, 82911},
      {9, 11},       {26, 27},      {59, 62},       {64, 80},
      {20, 90},      {4048, 94508}, {19, 82},       {67, 98},
      {66, 81},      {31, 48},      {23, 56},       {78, 90},
      {2, 95},       {8, 95},       {18, 28},       {20, 73},
      {45, 74},      {29, 60},      {5, 90},        {70, 75},
      {67, 86},      {54, 96},      {15966, 70373}, {52, 77},
      {13, 80},      {16, 98},      {13, 45},       {16799, 19241},
      {0, 13},       {45, 82},      {26, 98},       {72, 99},
      {44, 96},      {47, 79},      {41, 78},       {44, 50},
      {8, 48},       {15, 19},      {43, 46},       {54, 96},
      {5, 30},       {33, 93},      {25328, 70687}, {33019, 84766},
      {36, 67},      {38, 65},      {32, 61},       {53413, 75935},
      {2726, 51737}, {9, 10},       {13, 89},       {34, 46},
      {55, 84},      {27, 39},      {17, 65},       {40, 68},
      {21, 30},      {18, 83},      {55, 76},       {10, 63},
      {75, 78},      {0, 34},       {58, 84},       {15, 80},
      {47, 57},      {35, 59}};

  std::vector<Interval> expected = {{0, 100}, {2726, 94508}};

  {
    auto input     = intervals;
    const auto ans = merge_list_intervals_entire_list_lin_time(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }

  {
    auto input     = intervals;
    const auto ans = merge_list_intervals_entire_list_bruteforce(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }
}

TEST(merge_intervals_2_entire_list, all_unit_interval_non_overlapping)
{
  std::vector<Interval> intervals = {
      {-100, -100}, {-99, -99}, {-98, -98}, {-97, -97}, {-96, -96}, {-95, -95},
      {-94, -94},   {-93, -93}, {-92, -92}, {-91, -91}, {-90, -90}, {-89, -89},
      {-88, -88},   {-87, -87}, {-86, -86}, {-85, -85}, {-84, -84}, {-83, -83},
      {-82, -82},   {-81, -81}, {-80, -80}, {-79, -79}, {-78, -78}, {-77, -77},
      {-76, -76},   {-75, -75}, {-74, -74}, {-73, -73}, {-72, -72}, {-71, -71},
      {-70, -70},   {-69, -69}, {-68, -68}, {-67, -67}, {-66, -66}, {-65, -65},
      {-64, -64},   {-63, -63}, {-62, -62}, {-61, -61}, {-60, -60}, {-59, -59},
      {-58, -58},   {-57, -57}, {-56, -56}, {-55, -55}, {-54, -54}, {-53, -53},
      {-52, -52},   {-51, -51}, {-50, -50}, {-49, -49}, {-48, -48}, {-47, -47},
      {-46, -46},   {-45, -45}, {-44, -44}, {-43, -43}, {-42, -42}, {-41, -41},
      {-40, -40},   {-39, -39}, {-38, -38}, {-37, -37}, {-36, -36}, {-35, -35},
      {-34, -34},   {-33, -33}, {-32, -32}, {-31, -31}, {-30, -30}, {-29, -29},
      {-28, -28},   {-27, -27}, {-26, -26}, {-25, -25}, {-24, -24}, {-23, -23},
      {-22, -22},   {-21, -21}, {-20, -20}, {-19, -19}, {-18, -18}, {-17, -17},
      {-16, -16},   {-15, -15}, {-14, -14}, {-13, -13}, {-12, -12}, {-11, -11},
      {-10, -10},   {-9, -9},   {-8, -8},   {-7, -7},   {-6, -6},   {-5, -5},
      {-4, -4},     {-3, -3},   {-2, -2},   {-1, -1},   {0, 0},     {1, 1},
      {2, 2},       {3, 3},     {4, 4},     {5, 5},     {6, 6},     {7, 7},
      {8, 8},       {9, 9},     {10, 10},   {11, 11},   {12, 12},   {13, 13},
      {14, 14},     {15, 15},   {16, 16},   {17, 17},   {18, 18},   {19, 19},
      {20, 20},     {21, 21},   {22, 22},   {23, 23},   {24, 24},   {25, 25},
      {26, 26},     {27, 27},   {28, 28},   {29, 29},   {30, 30},   {31, 31},
      {32, 32},     {33, 33},   {34, 34},   {35, 35},   {36, 36},   {37, 37},
      {38, 38},     {39, 39},   {40, 40},   {41, 41},   {42, 42},   {43, 43},
      {44, 44},     {45, 45},   {46, 46},   {47, 47},   {48, 48},   {49, 49},
      {50, 50},     {51, 51},   {52, 52},   {53, 53},   {54, 54},   {55, 55},
      {56, 56},     {57, 57},   {58, 58},   {59, 59},   {60, 60},   {61, 61},
      {62, 62},     {63, 63},   {64, 64},   {65, 65},   {66, 66},   {67, 67},
      {68, 68},     {69, 69},   {70, 70},   {71, 71},   {72, 72},   {73, 73},
      {74, 74},     {75, 75},   {76, 76},   {77, 77},   {78, 78},   {79, 79},
      {80, 80},     {81, 81},   {82, 82},   {83, 83},   {84, 84},   {85, 85},
      {86, 86},     {87, 87},   {88, 88},   {89, 89},   {90, 90},   {91, 91},
      {92, 92},     {93, 93},   {94, 94},   {95, 95},   {96, 96},   {97, 97},
      {98, 98},     {99, 99},   {100, 100}};

  std::vector<Interval> expected = intervals;

  {
    auto input     = intervals;
    const auto ans = merge_list_intervals_entire_list_lin_time(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }

  {
    auto input     = intervals;
    const auto ans = merge_list_intervals_entire_list_bruteforce(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }
}

TEST(merge_intervals_2_entire_list, all_unit_interval_overlapping)
{
  std::vector<Interval> intervals = {
      {-100, -99}, {-99, -98}, {-98, -97}, {-97, -96}, {-96, -95}, {-95, -94},
      {-94, -93},  {-93, -92}, {-92, -91}, {-91, -90}, {-90, -89}, {-89, -88},
      {-88, -87},  {-87, -86}, {-86, -85}, {-85, -84}, {-84, -83}, {-83, -82},
      {-82, -81},  {-81, -80}, {-80, -79}, {-79, -78}, {-78, -77}, {-77, -76},
      {-76, -75},  {-75, -74}, {-74, -73}, {-73, -72}, {-72, -71}, {-71, -70},
      {-70, -69},  {-69, -68}, {-68, -67}, {-67, -66}, {-66, -65}, {-65, -64},
      {-64, -63},  {-63, -62}, {-62, -61}, {-61, -60}, {-60, -59}, {-59, -58},
      {-58, -57},  {-57, -56}, {-56, -55}, {-55, -54}, {-54, -53}, {-53, -52},
      {-52, -51},  {-51, -50}, {-50, -49}, {-49, -48}, {-48, -47}, {-47, -46},
      {-46, -45},  {-45, -44}, {-44, -43}, {-43, -42}, {-42, -41}, {-41, -40},
      {-40, -39},  {-39, -38}, {-38, -37}, {-37, -36}, {-36, -35}, {-35, -34},
      {-34, -33},  {-33, -32}, {-32, -31}, {-31, -30}, {-30, -29}, {-29, -28},
      {-28, -27},  {-27, -26}, {-26, -25}, {-25, -24}, {-24, -23}, {-23, -22},
      {-22, -21},  {-21, -20}, {-20, -19}, {-19, -18}, {-18, -17}, {-17, -16},
      {-16, -15},  {-15, -14}, {-14, -13}, {-13, -12}, {-12, -11}, {-11, -10},
      {-10, -9},   {-9, -8},   {-8, -7},   {-7, -6},   {-6, -5},   {-5, -4},
      {-4, -3},    {-3, -2},   {-2, -1},   {-1, 0},    {0, 1},     {1, 2},
      {2, 3},      {3, 4},     {4, 5},     {5, 6},     {6, 7},     {7, 8},
      {8, 9},      {9, 10},    {10, 11},   {11, 12},   {12, 13},   {13, 14},
      {14, 15},    {15, 16},   {16, 17},   {17, 18},   {18, 19},   {19, 20},
      {20, 21},    {21, 22},   {22, 23},   {23, 24},   {24, 25},   {25, 26},
      {26, 27},    {27, 28},   {28, 29},   {29, 30},   {30, 31},   {31, 32},
      {32, 33},    {33, 34},   {34, 35},   {35, 36},   {36, 37},   {37, 38},
      {38, 39},    {39, 40},   {40, 41},   {41, 42},   {42, 43},   {43, 44},
      {44, 45},    {45, 46},   {46, 47},   {47, 48},   {48, 49},   {49, 50},
      {50, 51},    {51, 52},   {52, 53},   {53, 54},   {54, 55},   {55, 56},
      {56, 57},    {57, 58},   {58, 59},   {59, 60},   {60, 61},   {61, 62},
      {62, 63},    {63, 64},   {64, 65},   {65, 66},   {66, 67},   {67, 68},
      {68, 69},    {69, 70},   {70, 71},   {71, 72},   {72, 73},   {73, 74},
      {74, 75},    {75, 76},   {76, 77},   {77, 78},   {78, 79},   {79, 80},
      {80, 81},    {81, 82},   {82, 83},   {83, 84},   {84, 85},   {85, 86},
      {86, 87},    {87, 88},   {88, 89},   {89, 90},   {90, 91},   {91, 92},
      {92, 93},    {93, 94},   {94, 95},   {95, 96},   {96, 97},   {97, 98},
      {98, 99},    {99, 100},  {100, 101}};

  std::vector<Interval> expected = {{-100, 101}};
  {
    auto input     = intervals;
    const auto ans = merge_list_intervals_entire_list_lin_time(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }

  {
    auto input     = intervals;
    const auto ans = merge_list_intervals_entire_list_bruteforce(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }
}

TEST(merge_intervals_2_entire_list, all_unit_interval_overlapping_shuffled)
{
  std::vector<Interval> intervals = {
      {-94, -93},  {-62, -61}, {53, 54},   {-93, -92}, {55, 56},   {-46, -45},
      {-71, -70},  {20, 21},   {34, 35},   {43, 44},   {27, 28},   {-38, -37},
      {70, 71},    {92, 93},   {-40, -39}, {-83, -82}, {25, 26},   {69, 70},
      {-35, -34},  {-15, -14}, {54, 55},   {65, 66},   {39, 40},   {-50, -49},
      {82, 83},    {-53, -52}, {100, 101}, {51, 52},   {-5, -4},   {94, 95},
      {36, 37},    {17, 18},   {56, 57},   {-61, -60}, {37, 38},   {99, 100},
      {-10, -9},   {95, 96},   {63, 64},   {-63, -62}, {-60, -59}, {2, 3},
      {-91, -90},  {13, 14},   {91, 92},   {-75, -74}, {10, 11},   {74, 75},
      {-100, -99}, {-25, -24}, {45, 46},   {81, 82},   {85, 86},   {50, 51},
      {66, 67},    {-34, -33}, {71, 72},   {72, 73},   {-31, -30}, {12, 13},
      {-4, -3},    {83, 84},   {57, 58},   {-65, -64}, {-80, -79}, {26, 27},
      {-33, -32},  {19, 20},   {11, 12},   {6, 7},     {9, 10},    {-58, -57},
      {77, 78},    {3, 4},     {-12, -11}, {-28, -27}, {-59, -58}, {0, 1},
      {-20, -19},  {5, 6},     {-76, -75}, {-21, -20}, {-99, -98}, {-92, -91},
      {-66, -65},  {-67, -66}, {52, 53},   {-74, -73}, {-52, -51}, {-90, -89},
      {87, 88},    {75, 76},   {42, 43},   {-45, -44}, {-27, -26}, {-54, -53},
      {-29, -28},  {-43, -42}, {60, 61},   {-1, 0},    {-89, -88}, {-11, -10},
      {47, 48},    {68, 69},   {-96, -95}, {-7, -6},   {-47, -46}, {15, 16},
      {-82, -81},  {-49, -48}, {79, 80},   {16, 17},   {14, 15},   {62, 63},
      {-97, -96},  {-68, -67}, {-26, -25}, {-86, -85}, {21, 22},   {-78, -77},
      {23, 24},    {-19, -18}, {80, 81},   {-22, -21}, {46, 47},   {-32, -31},
      {-87, -86},  {-70, -69}, {7, 8},     {24, 25},   {8, 9},     {-18, -17},
      {89, 90},    {96, 97},   {18, 19},   {35, 36},   {30, 31},   {41, 42},
      {40, 41},    {-81, -80}, {98, 99},   {4, 5},     {-84, -83}, {86, 87},
      {-36, -35},  {-14, -13}, {22, 23},   {90, 91},   {33, 34},   {1, 2},
      {-64, -63},  {-44, -43}, {-88, -87}, {-8, -7},   {-41, -40}, {-51, -50},
      {-30, -29},  {84, 85},   {-9, -8},   {-39, -38}, {32, 33},   {59, 60},
      {38, 39},    {93, 94},   {97, 98},   {58, 59},   {-98, -97}, {-72, -71},
      {76, 77},    {48, 49},   {64, 65},   {-2, -1},   {-37, -36}, {-13, -12},
      {-3, -2},    {-6, -5},   {49, 50},   {-42, -41}, {67, 68},   {78, 79},
      {28, 29},    {-17, -16}, {-16, -15}, {44, 45},   {61, 62},   {-24, -23},
      {-79, -78},  {-95, -94}, {-55, -54}, {88, 89},   {-57, -56}, {-73, -72},
      {-48, -47},  {31, 32},   {73, 74},   {-85, -84}, {-23, -22}, {-69, -68},
      {29, 30},    {-56, -55}, {-77, -76},
  };

  std::vector<Interval> expected = {{-100, 101}};
  {
    auto input     = intervals;
    const auto ans = merge_list_intervals_entire_list_lin_time(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }

  {
    auto input     = intervals;
    const auto ans = merge_list_intervals_entire_list_bruteforce(intervals);
    EXPECT_EQUAL_ELEMENTS(expected, ans);
  }
}

/*
TEST(merge_intervals_2_entire_list, random_generated_long_1){
    std::vector<Interval> Q(10);
    std::generate(Q.begin(), Q.end(), [&]() {
      constexpr int kLim = 100000;
      auto x = Book::Algorithm::generate_random_pair_in_range<int>(0, kLim);
      Interval ans;
      ans.start=x.first;
      ans.end = x.second;
      return ans;
  });

  for(const auto x : Q){
    std::cout<<"{"<<x.start<<","<<x.end<<"}, ";
  }
  std::cout<<std::endl;

}*/
